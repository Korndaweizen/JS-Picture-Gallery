extend layout
block content
  script(type='text/javascript' src="scripts/Promise.js")
  script(type='text/javascript' src="scripts/serverSelection.js")
  script(type='text/javascript' src="scripts/qualitySelection.js")
  script(type='text/javascript' src="scripts/logging.js")
  script(type='text/javascript').
    var tests = ['radio_ownsrcset', 'radio_qtpt', 'radio_qtptotf', 'radio_uncompressed', 'radio_xlarge','radio_large', 'radio_medium', 'radio_small'];
    var testCount = 0;
    $readyForTesting=false;

    var spinner=new Image();
    spinner.src="images/spinner.gif";
    processImg(spinner);

    $isDrawed=-1;  
    $pictureDLrunning=false;

    $('html').click(function() {
      $isDrawed=-1;
      $(".imageContainer").remove();
      $(".centered_image").remove();
    });

    function processImg(img) {
      img.style.padding = "8px"
      img.style.backgroundColor = "rgba(0, 0, 0, 0.25)";
      img.style.borderRadius = "8px";
      img.style.height = "auto";
      img.style.width = "auto";

    }

    function createButton(context, orientation, func){
        var button = document.createElement("input");
        button.type = "button";
        button.value = orientation;
        button.className+="imgButton_"+orientation;       
        button.onclick = func;
        context.appendChild(button);
    }

    function drawpicture(imgNo) {
      if($isDrawed>=1){
        return
      }
      $pictureDLrunning=true;
      $inbetweenPicDL=true;
      imageContainer = document.createElement("div");
      imageContainer.style.position = "absolute";
      imageContainer.style.textAlign = "center";
      imageContainer.style.width = "100%";
      imageContainer.style.height = "auto";
      imageContainer.className += " imageContainer";



      var a = document.createElement('a');
      imageContainer.appendChild(a);
      a.appendChild(spinner);

      imgUrl=""+$server+"images/"+$quality+"/"+imgNo+".jpg"+"?cachebreaker="+new Date().getTime();
      
      var actualImage = new Image();

      getTptOTF(imgUrl,imgNo).then(function(testImg){
        spinner.parentNode.removeChild(spinner);
        actualImage=testImg;
        processImg(actualImage);
        actualImage.className+="centered_image"
        a.appendChild(actualImage);
        $pictureDLrunning=false;
      });

      if(imgNo>1){
        createButton(imageContainer, "Previous", function(event){
          event.stopPropagation();
          $('html').click();
          drawpicture(imgNo-1);
        });         
      }

      if(imgNo<25){
        createButton(imageContainer,"Next", function(event){
          event.stopPropagation();
          $('html').click();
          drawpicture(imgNo+1);
        }); 
      }

      document.body.appendChild(imageContainer);
      $isDrawed=imgNo;
    }

    $('body').on('change', 'input[name=serverAlgo]:radio', changeServerMode);
    $('body').on('change', 'input[name=qualityAlgo]:radio', changeQualityMode);

  div(id="picture-container")
    script(type="text/javascript").
      function drawthumbs() {
        var pictureContainer= document.getElementById('picture-container');
        for(var i= 1; i<=25; i++){
          var thumbnail= document.createElement("img")
          thumbnail.height=100;
          thumbnail.width=100;
          thumbnail.src="images/thumbnails/"+i+".jpg";

          var a =document.createElement('a');
          a.data=i;
          a.id='image_'+i;
          a.className='imageCreator';
          a.onclick= function(event) {
            if($isDrawed==-1){
              event.stopPropagation();
            }
            drawpicture(this.data);
          }

          pictureContainer.appendChild(a);
          a.appendChild(thumbnail);
        }
      }  
      drawthumbs();
block sidebar
  .widget
    h1 Algorithms
    h2 Quality
    fieldset
      input(type='radio', name='qualityAlgo', value='radio_ownsrcset', id='radio_ownsrcset', checked)
      label(for='radio_ownsrcset')  Reimplemented srcset
      br
      input(type='radio', name='qualityAlgo', value='radio_qtpt', id='radio_qtpt')
      label(for='radio_qtpt')  Select by DL-Speed Background
      br
      input(type='radio', name='qualityAlgo', value='radio_qtptotf', id='radio_qtptotf')
      label(for='radio_qtptotf')  Select by DL-Speed OTF 
      br
      input(type='radio', name='qualityAlgo', value='radio_uncompressed', id='radio_uncompressed')
      label(for='radio_uncompressed')   Uncompressed
      br
      input(type='radio', name='qualityAlgo', value='radio_xlarge', id='radio_xlarge')
      label(for='radio_xlarge')  X-Large
      br
      input(type='radio', name='qualityAlgo', value='radio_large', id='radio_large')
      label(for='radio_large')  Large
      br
      input(type='radio', name='qualityAlgo', value='radio_medium', id='radio_medium')
      label(for='radio_medium')  Medium
      br
      input(type='radio', name='qualityAlgo', value='radio_small', id='radio_small')
      label(for='radio_small')  Small     
    h2 Server
    fieldset#servers    
      //input#radio_htpt(type='radio', name='serverAlgo', value='Highest throughput', checked)
      //label(for='radio_htpt')  Highest throughput
      //br
      input#radio_lpng(type='radio', name='serverAlgo', value='Lowest Latency', checked)
      label(for='radio_lpng')  Lowest Latency
      br